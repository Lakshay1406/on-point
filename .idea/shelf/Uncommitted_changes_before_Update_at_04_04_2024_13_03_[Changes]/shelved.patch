Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import requests as requests\r\nfrom flask import Flask, render_template, redirect, url_for, flash, request, jsonify, session, abort\r\nfrom flask_bootstrap import Bootstrap5\r\nfrom flask_login import UserMixin, login_user, LoginManager, current_user, logout_user, login_required\r\nfrom flask_session import Session\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom werkzeug.security import generate_password_hash, check_password_hash\r\nfrom api import calc_lat_long\r\n# from train import get_city_from_address,get_tickets_from_stcode\r\nfrom werkzeug.utils import secure_filename\r\nimport os\r\nfrom functools import wraps\r\nfrom http import HTTPStatus\r\nfrom datetime import datetime\r\nfrom amadeus import Client, ResponseError\r\nfrom OpenAI_API_script import search_destinations, find_nearest_station, find_nearest_airport\r\nfrom train import get_tickets_from_stcode\r\n\r\nTEST_MODE = False\r\napp = Flask(__name__)\r\napp.config['SECRET_KEY'] = '8Badawdawdb'\r\nbootstrap = Bootstrap5(app)\r\napp.config[\"SESSION_TYPE\"] = \"filesystem\"\r\nSession(app)\r\n\r\nlogin_manager = LoginManager()\r\nlogin_manager.init_app(app)\r\n\r\n# CONNECT TO DB\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///posts.db'\r\ndb = SQLAlchemy()\r\ndb.init_app(app)\r\n\r\n#API_keys\r\nrapid_api_key_for_train = 'ed61e1e291msh3180b8a78efa8bep16aeeajsn136814a859fa'\r\nrapid_api_key_for_lat_long='3813f5e554msheaa31e90e985c7ep116172jsn0ce5a97bccf5'\r\n# also check usage on openAPI\r\n\r\n\r\n# CONFIGURE TABLES\r\nclass User(db.Model, UserMixin):\r\n    __tablename__ = \"user\"\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    email = db.Column(db.String(100), unique=True)\r\n    password = db.Column(db.String(100))\r\n    name = db.Column(db.String(100))\r\n    age = db.Column(db.Integer)\r\n    phone_no = db.Column(db.Integer)\r\n\r\n\r\nclass Train(db.Model, UserMixin):\r\n    __tablename__ = \"train\"\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    code = db.Column(db.String(10), unique=True)\r\n    st_name = db.Column(db.String(100))\r\n    place = db.Column(db.String(100))\r\n\r\n\r\nclass Api(db.Model, UserMixin):\r\n    __tablename__ = \"api\"\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    code = db.Column(db.String(50), unique=True)\r\n    count = db.Column(db.Integer)\r\n\r\n\r\n# Create a user_loader callback\r\n@login_manager.user_loader\r\ndef load_user(user_id):\r\n    return db.get_or_404(User, user_id)\r\n\r\n\r\n@login_manager.unauthorized_handler\r\ndef unauthorized():\r\n    if request.blueprint == 'api':\r\n        abort(HTTPStatus.UNAUTHORIZED)\r\n    flash('login / signup is required')\r\n    return redirect(url_for('login'))\r\n\r\n\r\nwith app.app_context():\r\n    db.create_all()\r\n\r\n\r\n@app.route(\"/\")\r\ndef home():\r\n    return render_template('index.html')\r\n\r\n\r\n@app.route(\"/loading\", methods=[\"POST\"])\r\ndef loading():\r\n    if request.method == \"POST\":\r\n        # We'll use a session object to save the data sent by the user for processing\r\n        session[\"start_add\"] = request.form.get(\"start\")\r\n        session[\"end_add\"] = request.form.get('end')\r\n        session[\"indate\"] = request.form.get('in-date')\r\n        session[\"adult\"] = request.form.get('adult')\r\n        return render_template(\"loading.html\")\r\n\r\n\r\n@app.route('/abcd', methods=[\"GET\", \"POST\"])\r\ndef abcd():\r\n    start_add = session[\"start_add\"]\r\n    end_add = session[\"end_add\"]\r\n    indate = session[\"indate\"]\r\n    adult = session[\"adult\"]\r\n    print(start_add, end_add, indate, adult)\r\n\r\n    start_calc = calc_lat_long(start_add,rapid_api_key_for_lat_long)\r\n\r\n    ##coordinates saved in session\r\n    session[\"st_from_lat\"] = start_calc[\"from_lat\"]\r\n    session[\"st_from_long\"] = start_calc[\"from_long\"]\r\n    session[\"st_to_lat\"] = start_calc[\"to_lat\"]\r\n    session[\"st_to_long\"] = start_calc[\"to_long\"]\r\n\r\n    # converting to IATA code for flight search\r\n    start = start_calc[\"airport_code\"]\r\n    start_air = start_calc[\"airport_name\"].capitalize()\r\n    session[\"start_air\"] = start_air\r\n\r\n    ## assuming cab fare to be rs 15 per km\r\n    ## assuming cab travels at 30km/hr\r\n    start_fare = start_calc[\"dist\"] * 15\r\n    start_cab_time = int((start_calc[\"dist\"] / 30) * 60)\r\n\r\n    ## end_location\r\n    end_calc = calc_lat_long(end_add,rapid_api_key_for_lat_long)\r\n    ##coordinates saved in session\r\n    session[\"ed_from_lat\"] = end_calc[\"from_lat\"]\r\n    session[\"ed_from_long\"] = end_calc[\"from_long\"]\r\n    session[\"ed_to_lat\"] = end_calc[\"to_lat\"]\r\n    session[\"ed_to_long\"] = end_calc[\"to_long\"]\r\n\r\n    end = end_calc[\"airport_code\"]\r\n    end_air = end_calc[\"airport_name\"].capitalize()\r\n    session[\"end_air\"] = end_air\r\n    end_fare = end_calc[\"dist\"] * 15\r\n    end_cab_time = int((end_calc[\"dist\"] / 30) * 60)\r\n    print(start, end, start_calc[\"dist\"], end_calc[\"dist\"])\r\n\r\n    # flight offer search api calling and getting required values\r\n\r\n    amadeus = Client(\r\n        client_id='7KUpum4cjVAHkMvdn0GR0nbrIzYFGHd0',\r\n        client_secret='n8ZUaNGtyIDRwuBY'\r\n    )\r\n    try:\r\n        response = amadeus.shopping.flight_offers_search.get(\r\n            originLocationCode=start,\r\n            destinationLocationCode=end,\r\n            departureDate=indate,\r\n            adults=adult,\r\n            currencyCode='INR',\r\n            max=4,\r\n\r\n        )\r\n        l = response.data\r\n        print(l)\r\n        flights = []\r\n        for i in l:\r\n            flg = []\r\n            n = len(i[\"itineraries\"][0][\"segments\"]) - 1\r\n            flg.append(i[\"itineraries\"][0][\"duration\"].lstrip('PT'))\r\n            flg.append((i[\"itineraries\"][0][\"segments\"][0][\"departure\"][\"at\"].split('T'))[1][:-3])\r\n            flg.append((i[\"itineraries\"][0][\"segments\"][n][\"arrival\"][\"at\"].split('T'))[1][:-3])\r\n\r\n            code = i[\"itineraries\"][0][\"segments\"][0][\"carrierCode\"]\r\n            if code != 'FZ':\r\n                url = \"https://aviation-reference-data.p.rapidapi.com/airline/\" + code\r\n\r\n                headers = {\r\n                    \"X-RapidAPI-Key\": \"3813f5e554msheaa31e90e985c7ep116172jsn0ce5a97bccf5\",\r\n                    \"X-RapidAPI-Host\": \"aviation-reference-data.p.rapidapi.com\"\r\n                }\r\n\r\n                response = requests.get(url, headers=headers)\r\n\r\n                flg.append(response.json()['name'])\r\n            else:\r\n                flg.append(\"FlyDubai\")\r\n            flg.append(n)\r\n            price = i[\"price\"][\"total\"][:-3]\r\n            s, *d = str(price).partition(\".\")\r\n            r = \",\".join([s[x - 2:x] for x in range(-3, -len(s), -2)][::-1] + [s[-3:]])\r\n            price = \"\".join([r] + d)\r\n            flg.append(price)\r\n            flights.append(flg)\r\n            print(flg)\r\n        return render_template('abcd.html', start_cab_time=start_cab_time, end_cab_time=end_cab_time,\r\n                               start_fare=start_fare, end_fare=end_fare, start_add=start_add, end_add=end_add,\r\n                               start_air=start_air, end_air=end_air, flights=flights)\r\n    except ResponseError as error:\r\n        print(error)\r\n\r\n\r\n@app.route('/register', methods=[\"GET\", \"POST\"])\r\ndef register():\r\n    if request.method == \"POST\":\r\n        genpassword = generate_password_hash(request.form[\"password\"], method='pbkdf2:sha256', salt_length=8)\r\n        email = request.form.get('email')\r\n        result = db.session.execute(db.select(User).where(User.email == email))\r\n        user = result.scalar()\r\n        if user:\r\n            flash('Email already exists.Try logging in instead.')\r\n            return redirect(url_for('login'))\r\n        new_user = User(\r\n            email=request.form.get('email'),\r\n            name=request.form.get('name'),\r\n            password=genpassword,\r\n            age=request.form.get('age'),\r\n            phone_no=request.form.get('phone_no')\r\n        )\r\n        db.session.add(new_user)\r\n        db.session.commit()\r\n\r\n        login_user(new_user)\r\n\r\n        return redirect(url_for(\"plan\"))\r\n    return render_template(\"register.html\")\r\n\r\n\r\n@app.route('/map', methods=[\"GET\", \"POST\"])\r\ndef map():\r\n    num = int(request.args.get('id'))\r\n    print(num)\r\n    if num == 1:\r\n        start_add = session[\"start_add\"]\r\n        end_add = session[\"start_air\"]\r\n        from_lat = session[\"st_from_lat\"]\r\n        from_long = session[\"st_from_long\"]\r\n        to_lat = session[\"st_to_lat\"]\r\n        to_long = session[\"st_to_long\"]\r\n    elif num == 2:\r\n        start_add = session[\"end_air\"]\r\n        end_add = session[\"end_add\"]\r\n        to_lat = session[\"ed_from_lat\"]\r\n        to_long = session[\"ed_from_long\"]\r\n        from_lat = session[\"ed_to_lat\"]\r\n        from_long = session[\"ed_to_long\"]\r\n    cords = {'start_add': start_add, 'end_add': end_add, 'from_lat': from_lat, 'from_long': from_long, 'to_lat': to_lat,\r\n             'to_long': to_long}\r\n    return render_template('map.html', cords=cords)\r\n\r\n\r\n@app.route('/plan', methods=[\"GET\", \"POST\"])\r\ndef plan():\r\n    # if request.method == 'POST':\r\n    #     start_add = request.form.get('start')\r\n    #     end_add = request.form.get('end')\r\n    #     indate = request.form.get('in-date')\r\n    #     # outdate = request.form.get('out-date')\r\n    #     adult = request.form.get('adult')\r\n    #     # child = request.form.get('child')\r\n\r\n    return render_template('plan.html')\r\n\r\n\r\n@app.route('/final', methods=[\"GET\", \"POST\"])\r\ndef final():\r\n    start_add = request.args.get('start_add')\r\n    end_add = request.args.get('end_add')\r\n    flg = request.args.getlist('flg')\r\n    flg = flg[0].strip('[]').split(',')\r\n    flg = [i.strip(\"/\"\" '\") for i in flg]\r\n    start_air = request.args.get('start_air')\r\n    end_air = request.args.get('end_air')\r\n\r\n    start_fare = request.args.get('start_fare')\r\n    end_fare = request.args.get('end_fare')\r\n    start_cab_time = request.args.get('start_cab_time')\r\n    end_cab_time = request.args.get('end_cab_time')\r\n\r\n    print(flg)\r\n    return render_template('final.html', start_cab_time=start_cab_time, end_cab_time=end_cab_time,\r\n                           start_fare=start_fare, end_fare=end_fare, start_air=start_air, end_air=end_air, flg=flg,\r\n                           end_add=end_add, start_add=start_add)\r\n\r\n\r\n@app.route('/login', methods=[\"GET\", \"POST\"])\r\ndef login():\r\n    if request.method == \"POST\":\r\n        email = request.form.get('email')\r\n        password = request.form.get('password')\r\n\r\n        result = db.session.execute(db.select(User).where(User.email == email))\r\n        user = result.scalar()\r\n        if not user:\r\n            flash('Invalid email provided')\r\n            return render_template(\"login.html\")\r\n        if check_password_hash(user.password, password):\r\n            login_user(user)\r\n\r\n            return redirect(url_for('plan'))\r\n        else:\r\n            flash('Password incorrect, please try again')\r\n            return render_template(\"login.html\")\r\n    return render_template(\"login.html\")\r\n\r\n\r\n# @app.route('/train', methods=[\"GET\", \"POST\"])\r\n# def train():\r\n#     # start= \"Off, Old Mahabalipuram Road, Kamaraj Nagar, Semmancheri, Chennai, Tamil Nadu 600119\"\r\n#     # end=\"Kasturba Rd, behind High Court of Karnataka, Ambedkar Veedhi, Sampangi Rama Nagara, Bengaluru, Karnataka 560001\"\r\n#     begin = find_nearest_station(start)\r\n#     print(begin)\r\n#     to = find_nearest_station(end)\r\n#     print(to)\r\n#\r\n#\r\n#     date='2024-04-03'\r\n#     l=get_tickets_from_stcode(begin,to,date,rapid_api_key_for_train)\r\n#\r\n#\r\n#\r\n#\r\n#     return redirect(url_for('home'))\r\n\r\n\r\n@app.route('/aboutus')\r\ndef aboutus():\r\n    return render_template('aboutus.html')\r\n\r\n\r\n@app.route('/contact')\r\ndef contact():\r\n    return render_template('contact.html')\r\n\r\n\r\n@app.route('/logout')\r\n@login_required\r\ndef logout():\r\n    logout_user()\r\n    return redirect(url_for('home'))\r\n\r\n\r\n@app.route('/budget')\r\ndef budget():\r\n    return render_template('budget.html')\r\n\r\n\r\n@app.route('/destinations', methods=[\"GET\", \"POST\"])\r\ndef destinations():\r\n    address = session['budget_start_add']\r\n    budget = session['budget_budget']\r\n    date = session['budget_date']\r\n    print(address, budget, date)\r\n    destinations = search_destinations(address + ' ' + budget)\r\n    print(destinations)\r\n    return render_template('destinations.html', destinations=destinations)\r\n\r\n\r\n\r\n@app.route(\"/loading_locations\", methods=[\"POST\"])###loading nearby destinations\r\ndef loading_locations():\r\n    if request.method == \"POST\":\r\n        session['budget_start_add']=request.form.get('address')\r\n        session['budget_budget']=request.form.get('budget')\r\n        session['budget_date']=request.form.get('date')\r\n        return render_template(\"loading_locations.html\")\r\n\r\n@app.route(\"/loading_destination\")### for long load after selecting city\r\ndef loading_destination():\r\n    session['budget_city'] = request.args.get('city')\r\n    print(session['budget_city'])\r\n    return render_template(\"loading_destination.html\")\r\n\r\n\r\n@app.route('/details')\r\ndef details():\r\n    city = session['budget_city']\r\n    print(\"got\" + city)\r\n    if TEST_MODE == True:\r\n        ## details for chennai to kodaikanal for budget 50000\r\n        train_details = [\r\n            {'train_number': '20665', 'train_name': 'Vande Bharat Express', 'duration': '5:40', 'from': 'MS',\r\n             'to': 'MDU', 'departure_time': '14:50', 'arrival_time': '20:30', 'from_station_name': 'CHENNAI EGMORE',\r\n             'to_station_name': 'MADURAI JN', 'class': 'CC', 'fare': 1005},\r\n            {'train_number': '16101', 'train_name': 'Chennai Egmore - Kollam Express', 'duration': '7:10', 'from': 'MS',\r\n             'to': 'MDU', 'departure_time': '17:00', 'arrival_time': '00:10', 'from_station_name': 'CHENNAI EGMORE',\r\n             'to_station_name': 'MADURAI JN', 'class': '3A', 'fare': 790},\r\n            {'train_number': '12661', 'train_name': 'Pothigai SF Express', 'duration': '7:25', 'from': 'MS',\r\n             'to': 'MDU', 'departure_time': '20:40', 'arrival_time': '04:05', 'from_station_name': 'CHENNAI EGMORE',\r\n             'to_station_name': 'MADURAI JN', 'class': '1A', 'fare': 1960}]\r\n        start_iata = 'MAA'\r\n        end_iata = 'CJB'\r\n        start_air = 'Chennai International Airport'\r\n        end_air = 'Coimbatore International Airport'\r\n        flights = [['1H10M', '13:20', '14:30', 'AIR INDIA', 0, '5,587'],\r\n                   ['6H55M', '07:00', '13:55', 'VISTARA', 1, '11,367'],\r\n                   ['17H25M', '20:30', '13:55', 'VISTARA', 1, '11,367'],\r\n                   ['25H25M', '12:30', '13:55', 'VISTARA', 1, '12,078']]\r\n\r\n        return render_template('details.html', train_details=train_details, start_iata=start_iata, end_iata=end_iata,\r\n                               start_air=start_air, end_air=end_air, flights=flights)\r\n\r\n    ### calculating possible train routes\r\n    begin = find_nearest_station(session['budget_start_add'])\r\n    print(begin)\r\n    to = find_nearest_station(city)\r\n    print(to)\r\n    date = session['budget_date']\r\n    if to == None:\r\n        train_details = []\r\n    else:\r\n        train_details = get_tickets_from_stcode(begin, to, date, rapid_api_key_for_train)\r\n\r\n    #### calculating possible flight routes\r\n\r\n    # calculating IATA code and name\r\n    data1 = find_nearest_airport(session['budget_start_add'])\r\n    start_iata = data1['IATA-code']\r\n    start_air = data1['airport name']\r\n\r\n    data2 = find_nearest_airport(city)\r\n    end_iata = data2['IATA-code']\r\n    end_air = data2['airport name']\r\n    print(start_iata, end_iata)\r\n    '''start_calc = calc_lat_long(session['budget_start_add'], rapid_api_key_for_lat_long)\r\n    start_iata=start_calc[\"airport_code\"]\r\n    start_air=start_calc[\"airport_name\"]\r\n\r\n    end_calc = calc_lat_long(city, rapid_api_key_for_lat_long)\r\n    end_iata = end_calc[\"airport_code\"]\r\n    end_air = end_calc[\"airport_name\"]\r\n    print(start_iata, end_iata)'''\r\n    if start_iata==end_iata:\r\n        flights = []\r\n        return render_template('details.html', train_details=train_details, start_iata=start_iata, end_iata=end_iata,\r\n                               start_air=start_air, end_air=end_air, flights=flights)\r\n    # flight offer search api calling and getting required values\r\n\r\n    amadeus = Client(\r\n        client_id='7KUpum4cjVAHkMvdn0GR0nbrIzYFGHd0',\r\n        client_secret='n8ZUaNGtyIDRwuBY'\r\n    )\r\n    try:\r\n        response = amadeus.shopping.flight_offers_search.get(\r\n            originLocationCode=start_iata,\r\n            destinationLocationCode=end_iata,\r\n            departureDate=date,\r\n            adults=1,\r\n            currencyCode='INR',\r\n            max=4,\r\n\r\n        )\r\n        l = response.data\r\n        print(l)\r\n        flights = []\r\n        for i in l:\r\n            flg = []\r\n            n = len(i[\"itineraries\"][0][\"segments\"]) - 1\r\n            flg.append(i[\"itineraries\"][0][\"duration\"].lstrip('PT'))\r\n            flg.append((i[\"itineraries\"][0][\"segments\"][0][\"departure\"][\"at\"].split('T'))[1][:-3])\r\n            flg.append((i[\"itineraries\"][0][\"segments\"][n][\"arrival\"][\"at\"].split('T'))[1][:-3])\r\n\r\n            code = i[\"itineraries\"][0][\"segments\"][0][\"carrierCode\"]\r\n            if code != 'FZ':\r\n                url = \"https://aviation-reference-data.p.rapidapi.com/airline/\" + code\r\n\r\n                headers = {\r\n                    \"X-RapidAPI-Key\": \"3813f5e554msheaa31e90e985c7ep116172jsn0ce5a97bccf5\",\r\n                    \"X-RapidAPI-Host\": \"aviation-reference-data.p.rapidapi.com\"\r\n                }\r\n\r\n                response = requests.get(url, headers=headers)\r\n\r\n                flg.append(response.json()['name'])\r\n            else:\r\n                flg.append(\"FlyDubai\")\r\n            flg.append(n)\r\n            price = i[\"price\"][\"total\"][:-3]\r\n            s, *d = str(price).partition(\".\")\r\n            r = \",\".join([s[x - 2:x] for x in range(-3, -len(s), -2)][::-1] + [s[-3:]])\r\n            price = \"\".join([r] + d)\r\n            flg.append(price)\r\n            flights.append(flg)\r\n            print(flg)\r\n    except ResponseError as error:\r\n        print(error)\r\n    print(\"successfully processed details\")\r\n    return render_template('details.html', train_details=train_details, start_iata=start_iata, end_iata=end_iata,\r\n                           start_air=start_air, end_air=end_air, flights=flights)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(debug=True, port=5000)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	
+++ b/main.py	
@@ -33,7 +33,7 @@
 
 #API_keys
 rapid_api_key_for_train = 'ed61e1e291msh3180b8a78efa8bep16aeeajsn136814a859fa'
-rapid_api_key_for_lat_long='3813f5e554msheaa31e90e985c7ep116172jsn0ce5a97bccf5'
+rapid_api_key_for_lat_long='3f0c1fbad2msh646adf4f427213ep18e805jsn66ed0b25352a'
 # also check usage on openAPI
 
 
Index: templates/destinations.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\r\n{% block extra_css %}\r\n\r\n<style>\r\n    .wrapper{margin:10vh}\r\n    //post card stylesbody{\r\n    /* Created with https://www.css-gradient.com */\r\n    background: #161616;\r\n    }\r\n    h1{\r\n      color:#fff;\r\n    }\r\n    .lead{\r\n      color:#aaa;\r\n    }\r\n    \r\n    .card{\r\n      border: none;\r\n      transition: all 500ms cubic-bezier(0.19, 1, 0.22, 1);\r\n      overflow:hidden;\r\n      border-radius:20px;\r\n      min-height:450px;\r\n      box-shadow: 0 0 12px 0 rgba(0,0,0,0.2);\r\n    }\r\n    \r\n    @media (max-width: 768px) {\r\n      .card{\r\n        min-height:350px;\r\n      }\r\n    }\r\n    \r\n    @media (max-width: 420px) {\r\n      .card{\r\n        min-height:300px;\r\n      }\r\n    }\r\n    \r\n    .card.card-has-bg {\r\n      transition: all 500ms cubic-bezier(0.19, 1, 0.22, 1);\r\n      background-size:cover;\r\n      background-repeat:no-repeat;\r\n      background-position: center center;\r\n      &:before {\r\n        content: '';\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        background: fit-content;\r\n      }\r\n      &:hover {\r\n        transform: scale(0.98);\r\n        box-shadow: 0 0 5px -2px rgba(0,0,0,0.3);\r\n\r\n        transition: all 500ms cubic-bezier(0.19, 1, 0.22, 1);\r\n        .card-img-overlay {\r\n          transition: all 800ms cubic-bezier(0.19, 1, 0.22, 1);\r\n          background: linear-gradient(to bottom, rgba(0, 0, 0, 1), rgba(0, 0, 0, 0)); \r\n        }\r\n      }\r\n    }\r\n    \r\n    .card-footer{\r\n      background: none;\r\n      border-top: none;\r\n      .media{\r\n        img{\r\n          border:solid 3px rgba(255,255,255,0.3);\r\n        }\r\n      }\r\n    }\r\n    \r\n    .card-title{\r\n      font-weight:800;\r\n    }\r\n    \r\n    .card-meta{\r\n      color:rgba(0,0,0,0.3);\r\n      text-transform:uppercase;\r\n      font-weight:500;\r\n      letter-spacing:2px;\r\n    }\r\n    \r\n    .card-body{ \r\n      transition: all 500ms cubic-bezier(0.19, 1, 0.22, 1);\r\n    }\r\n    \r\n    .card-body:hover {\r\n      margin-top:30px;\r\n      transition: all 800ms cubic-bezier(0.19, 1, 0.22, 1);\r\n    }\r\n    \r\n    .card-img-overlay {\r\n      transition: all 800ms cubic-bezier(0.19, 1, 0.22, 1);\r\n      background: linear-gradient(to bottom, rgba(0, 0, 0, 1), rgba(0, 0, 0, 0)); \r\n    }\r\n    \r\n    .card:hover {\r\n      cursor: pointer;\r\n      transform: scale(0.98);\r\n      transition: all 800ms cubic-bezier(0.19, 1, 0.22, 1);\r\n      box-shadow: 0 0 5px -2px rgba(0,0,0,0.3);\r\n    }\r\n    @media (max-width: 767px){\r\n      /* Add media queries if needed */\r\n    }\r\n    \r\n    #cardtitle{\r\n      color:white;\r\n    }\r\n    .card-title-no-hover {\r\n      transition: none;\r\n    }\r\n    \r\n</style>\r\n{% endblock %}\r\n\r\n\r\n    {% block content %}\r\n    <header></header>\r\n    <main>\r\n        <section class=\"wrapper\">\r\n            <div class=\"container\">\r\n                <div class=\"row\">\r\n                    {% for dest in destinations %}\r\n                    <div class=\"col-sm-12 col-md-6 col-lg-4 mb-4\">\r\n                      <a href=\"{{url_for('loading_destination',city=dest[0])}}\">\r\n                        <div class=\"card text-dark card-has-bg click-col\" style=\"background-image:url('{{dest[1]}}');\">\r\n\r\n                            <div class=\"card-img-overlay d-flex flex-column\">\r\n                                <div class=\"card-body\">\r\n                                    <h1 class=\"card-title mt-0\" id=\"cardtitle\">{{dest[0]}}</h1>\r\n                                </div>\r\n                                <div class=\"card-footer\">\r\n                                    <div class=\"media\">\r\n                                        <div class=\"media-body\">\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                      </a>\r\n                    </div>\r\n                    {% endfor %}\r\n                </div>\r\n        </section>\r\n        <section>\r\n            <div class=\"container\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-12\">\r\n                        <div >\r\n                            <div style=\"width:80%;height:500px;\">\r\n                                <h3 style=\"font-weight:600;\">Other Popular National Destinations:</h3>\r\n                                <!-- Add additional cards for other destinations here -->\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n        <section>\r\n          <div class=\"container\">\r\n              <div class=\"row\">\r\n                  <div class=\"col-12\">\r\n                      <div >\r\n                          <div style=\"width:80%;height:500px;\">\r\n                              <h3 style=\"font-weight:600;\">Other Popular International Destinations:</h3>\r\n                              <!-- Add additional cards for other destinations here -->\r\n                          </div>\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n      </section>\r\n    </main>\r\n    <footer></footer>\r\n    \r\n        {% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/destinations.html b/templates/destinations.html
--- a/templates/destinations.html	
+++ b/templates/destinations.html	
@@ -87,7 +87,7 @@
     }
     
     .card-body:hover {
-      margin-top:30px;
+      margin-top:10px;
       transition: all 800ms cubic-bezier(0.19, 1, 0.22, 1);
     }
     
@@ -120,7 +120,8 @@
     {% block content %}
     <header></header>
     <main>
-        <section class="wrapper">
+        <div style="font-size:35px;margin-left:73px;font-weight:700;">Search Results:</div>
+        <section class="wrapper" style="margin-top:5px;">
             <div class="container">
                 <div class="row">
                     {% for dest in destinations %}
@@ -130,7 +131,7 @@
 
                             <div class="card-img-overlay d-flex flex-column">
                                 <div class="card-body">
-                                    <h1 class="card-title mt-0" id="cardtitle">{{dest[0]}}</h1>
+                                    <h1 class="card-title mt-0" id="cardtitle" style="white-space:nowrap;">{{dest[0]}}</h1>
                                 </div>
                                 <div class="card-footer">
                                     <div class="media">
@@ -145,34 +146,34 @@
                     {% endfor %}
                 </div>
         </section>
-        <section>
-            <div class="container">
-                <div class="row">
-                    <div class="col-12">
-                        <div >
-                            <div style="width:80%;height:500px;">
-                                <h3 style="font-weight:600;">Other Popular National Destinations:</h3>
-                                <!-- Add additional cards for other destinations here -->
-                            </div>
-                        </div>
-                    </div>
-                </div>
-            </div>
-        </section>
-        <section>
-          <div class="container">
-              <div class="row">
-                  <div class="col-12">
-                      <div >
-                          <div style="width:80%;height:500px;">
-                              <h3 style="font-weight:600;">Other Popular International Destinations:</h3>
-                              <!-- Add additional cards for other destinations here -->
-                          </div>
-                      </div>
-                  </div>
-              </div>
-          </div>
-      </section>
+<!--        <section>-->
+<!--            <div class="container">-->
+<!--                <div class="row">-->
+<!--                    <div class="col-12">-->
+<!--                        <div >-->
+<!--                            <div style="width:80%;height:500px;">-->
+<!--                                <h3 style="font-weight:600;">Other Popular National Destinations:</h3>-->
+<!--                                &lt;!&ndash; Add additional cards for other destinations here &ndash;&gt;-->
+<!--                            </div>-->
+<!--                        </div>-->
+<!--                    </div>-->
+<!--                </div>-->
+<!--            </div>-->
+<!--        </section>-->
+<!--        <section>-->
+<!--          <div class="container">-->
+<!--              <div class="row">-->
+<!--                  <div class="col-12">-->
+<!--                      <div >-->
+<!--                          <div style="width:80%;height:500px;">-->
+<!--                              <h3 style="font-weight:600;">Other Popular International Destinations:</h3>-->
+<!--                              &lt;!&ndash; Add additional cards for other destinations here &ndash;&gt;-->
+<!--                          </div>-->
+<!--                      </div>-->
+<!--                  </div>-->
+<!--              </div>-->
+<!--          </div>-->
+<!--      </section>-->
     </main>
     <footer></footer>
     
Index: templates/budget.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\r\n\r\n{% block extra_css %}\r\n        <style>\r\n        body{\r\n            background-image: url(../static/images/travel2.jpeg);\r\n            background-size: cover;\r\n            background-repeat:no-repeat;\r\n            background-position:center;\r\n        }\r\n        .blurred-background {\r\n            backdrop-filter: blur(5px); /* Apply blur effect */\r\n            padding: 20px; /* Adjust padding as needed */\r\n            width: fit-content; /* Set a specific width */\r\n            margin: auto; /* Center the div horizontally */\r\n            border-radius: 15px; /* Optional: Add rounded corners */\r\n        }\r\n        \r\n        label{\r\n            font-size: 17px;\r\n            font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif\r\n        }\r\n        #search{\r\n            margin-bottom:10px;\r\n        }\r\n        form{\r\n            padding-left:5px;\r\n            padding-right:14px;\r\n        }\r\n        input{\r\n            width:75%;\r\n            height:25px;\r\n        }\r\n        #container{\r\n            margin-top:10px !important;\r\n            margin:auto;\r\n            width: 50%;\r\n            padding-top:5px;\r\n            padding-bottom:5px;    \r\n        }\r\n        #departurebox{\r\n            padding-top:5px;\r\n            padding-bottom:15px;\r\n        }\r\n        #adultcountbox{\r\n            padding-top:5px;\r\n            padding-bottom:15px;\r\n        }\r\n        #Submit{\r\n            text-align:center;\r\n            flex-wrap: wrap;\r\n            width:25%;\r\n            height:50px;\r\n            border: 0;\r\n  line-height: 2.5;\r\n  font-size: 1rem;\r\n  text-align: center;\r\n  color: #fff;\r\n  text-shadow: 1px 1px 1px #000;\r\n  border-radius: 10px;\r\n  background-color: #DE3163;\r\n  background-image: linear-gradient(\r\n    to top left,\r\n    rgba(0, 0, 0, 0.2),\r\n    rgba(0, 0, 0, 0.2) 30%,\r\n    rgba(0, 0, 0, 0)\r\n  );\r\n  box-shadow:\r\n    inset 2px 2px 3px rgba(255, 255, 255, 0.6),\r\n    inset -2px -2px 3px rgba(0, 0, 0, 0.6);\r\n}\r\n        \r\n        label{\r\n            text-align:left;\r\n        }\r\n        h1{\r\n            font-family:Verdana, Geneva, Tahoma, sans-serif;\r\n            /* margin-bottom:20px; */\r\n        }\r\n        #Submit:hover{\r\n            background-color: #DE3163;\r\n            border:1px solid #DE3163;\r\n        }\r\n\r\n\r\n    </style>\r\n{% endblock %}\r\n{% block content %}\r\n    <center>\r\n        <div id=\"container\" class=\"blurred-background\" >\r\n            <form id=\"searchelements\" method=\"post\" action=\"{{url_for('loading_locations')}}\">\r\n                <center><h1>Plan Your Trip</h1></center>\r\n                <div id=\"frombox\" >\r\n                <label for=\"from\">Starting point</label><br>\r\n                <input id=\"from\" name=\"address\" type=\"text\" placeholder=\"Enter the starting location\" required >\r\n                </div>\r\n                <div id=\"budget\">\r\n                    <label for=\"budget\">Budget(in rupees)</label><br>\r\n                    <input type=\"number\" id=\"budget\"name=\"budget\" placeholder=\"Please enter the budget for the trip\" required min=\"1000\">\r\n                </div>\r\n                <div id=\"departurebox\">\r\n                    <label for=\"departure\">Departure date</label><br>\r\n                    <input id=\"departure\" name=\"date\" type=\"date\"  placeholder=\"Departure date\" required>\r\n                </div>\r\n\r\n                <center><input class=\"btn btn-primary\" type=\"submit\" value=\"SUBMIT\" id=\"Submit\"></center>\r\n            </form>\r\n\r\n            \r\n        </div>\r\n    </center>\r\n\r\n\r\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/budget.html b/templates/budget.html
--- a/templates/budget.html	
+++ b/templates/budget.html	
@@ -9,7 +9,6 @@
             background-position:center;
         }
         .blurred-background {
-            backdrop-filter: blur(5px); /* Apply blur effect */
             padding: 20px; /* Adjust padding as needed */
             width: fit-content; /* Set a specific width */
             margin: auto; /* Center the div horizontally */
@@ -36,7 +35,8 @@
             margin:auto;
             width: 50%;
             padding-top:5px;
-            padding-bottom:5px;    
+            padding-bottom:5px;
+            background-color:white;
         }
         #departurebox{
             padding-top:5px;
Index: templates/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\r\n{% block extra_css %}\r\n<style>\r\n    body {\r\n        background-image: url(../static/images/travel2.jpeg);\r\n        background-size: cover; /* Cover the entire background */\r\n        background-repeat: no-repeat; /* Prevent image from repeating */\r\n        background-position: center; /* Center the background */\r\n    }\r\n    .blurred-background {\r\n      backdrop-filter: blur(5px); /* Apply blur effect */\r\n      padding: 20px; /* Adjust padding as needed */\r\n      width: 70%; /* Set a specific width */\r\n      margin: auto; /* Center the div horizontally */\r\n      border-radius: 15px; /* Optional: Add rounded corners */\r\n  }\r\n</style>\r\n{% endblock %}\r\n\r\n{% block content %}\r\n\r\n<div class=\"px-4 py-5 my-5 text-center blurred-background\">\r\n<!--    <img class=\"d-block mx-auto mb-4\" src=\"../static/images/icons8-cart-24.png\" alt=\"\" width=\"72\" height=\"57\">-->\r\n    <h1 class=\"display-5 fw-bold text-body-emphasis\" style=\"color:#E3242B;\">Onward and On Point, <br>towards your destination.</h1>\r\n    <div class=\"col-lg-6 mx-auto\">\r\n      <p class=\"lead mb-4\" style=\"color:white; font-size:22px;\">Unlock the potential of every mile with our route tracking.<br>\r\nWhere every turn counts, your journey optimized.<br>\r\nNavigate with ease, explore with confidence.</p>\r\n      <div class=\"d-grid gap-2 d-sm-flex justify-content-sm-center\">\r\n        <a type=\"button\" class=\"btn btn-primary btn-lg px-4 gap-3\" href=\"{{ url_for('plan') }}\" >Explore Now!</a>\r\n        <a type=\"button\" class=\"btn btn-primary btn-lg px-4 gap-3\" href=\"{{ url_for('budget') }}\" >Plan your trip!</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n{% endblock %}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/index.html b/templates/index.html
--- a/templates/index.html	
+++ b/templates/index.html	
@@ -21,9 +21,9 @@
 
 <div class="px-4 py-5 my-5 text-center blurred-background">
 <!--    <img class="d-block mx-auto mb-4" src="../static/images/icons8-cart-24.png" alt="" width="72" height="57">-->
-    <h1 class="display-5 fw-bold text-body-emphasis" style="color:#E3242B;">Onward and On Point, <br>towards your destination.</h1>
+    <h1 class="display-5 fw-bold text-body-emphasis" style="color:#E3242B;white-space:nowrap;text-align:center;">Onward and On Point, <br>towards your destination.</h1>
     <div class="col-lg-6 mx-auto">
-      <p class="lead mb-4" style="color:white; font-size:22px;">Unlock the potential of every mile with our route tracking.<br>
+      <p class="lead mb-4" style="color:white; font-size:22px;white-space:nowrap;">Unlock the potential of every mile with our route tracking.<br>
 Where every turn counts, your journey optimized.<br>
 Navigate with ease, explore with confidence.</p>
       <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
Index: .env
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.env b/.env
new file mode 100644
--- /dev/null	
+++ b/.env	
@@ -0,0 +1,2 @@
+# Once you add your API key below, make sure to not share it with anyone! The API key should remain private.
+OPENAI_API_KEY="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"
\ No newline at end of file
